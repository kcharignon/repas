#!/bin/bash

echo "php bin_sh"

# Vérifie si Docker Compose est installé
if ! command -v docker-compose &>/dev/null && ! command -v docker compose &>/dev/null; then
    echo "Erreur : Docker Compose n'est pas installé ou n'est pas dans le PATH."
    exit 1
fi

# Utiliser "docker compose" si disponible, sinon "docker-compose"
DOCKER_COMPOSE_CMD=$(command -v docker compose &>/dev/null && echo "docker compose" || echo "docker-compose")

# Vérifie si l'option --coverage est passée
COVERAGE_MODE=false
ARGS=()

for arg in "$@"; do
    if [ "$arg" == "--coverage" ]; then
        COVERAGE_MODE=true
    else
        ARGS+=("$arg")
    fi
done

# Vérifie si des arguments restent après le filtrage
if [ ${#ARGS[@]} -lt 1 ]; then
    # Aucun argument passé, on lance PHPUnit sans arguments
    COMMAND="$DOCKER_COMPOSE_CMD exec"
else
    # Vérifie si le premier argument est un chemin de test
    INPUT_PATH="${ARGS[0]}"
    if [[ "$INPUT_PATH" != tests/* ]]; then
        INPUT_PATH="tests/$INPUT_PATH"
    fi

    # Supprime le premier argument et récupère les autres arguments
    ADDITIONAL_ARGS="${ARGS[@]:1}"

    # Crée la commande
    COMMAND="$DOCKER_COMPOSE_CMD exec"
fi

# Ajoute XDEBUG_MODE=coverage si l'option --coverage est activée
if [ "$COVERAGE_MODE" = true ]; then
    COMMAND="$COMMAND -e XDEBUG_MODE=coverage"
fi

# Finalise la commande
COMMAND="$COMMAND php php bin/phpunit $INPUT_PATH $ADDITIONAL_ARGS"

# Affiche la commande en vert
echo -e "\033[32m$COMMAND\033[0m"

# Exécute la commande
$COMMAND

{% extends '@Shared/base.html.twig' %}

{% block title %}Créer une Recette{% endblock %}

{% block body %}
    <div class="container mt-4">
        {% if recipe is not defined %}
            <h2>Créer une nouvelle recette</h2>
        {% else %}
            <h2>{{ recipe.name|capitalize }}</h2>
        {% endif %}

        {{ form_start(form) }}
        <div class="mb-3">
            {{ form_row(form.name) }}
            {{ form_row(form.serving) }}
            {{ form_row(form.typeSlug) }}
        </div>

        <h4>Ingrédients</h4>
        <div id="recipe-rows">
            <ul data-prototype="{{ form_widget(form.rows.vars.prototype) | e }}">
                {% for row in form.rows %}
                    <li class="mb-2">
                        <!-- Ingrédient (ligne complète) -->
                        <div class="mb-2">
                            {{ form_row(row.ingredientSlug) }}
                        </div>

                        <!-- Quantité et Unité (toujours côte à côte sur mobile et desktop) -->
                        <div class="d-flex gap-2">
                            <div style="flex:1">
                                {{ form_row(row.quantity) }}
                            </div>
                            <div style="flex: 2">
                                {{ form_row(row.unitSlug) }}
                            </div>
                        </div>
                    </li>
                {% endfor %}
            </ul>
        </div>

        <button type="button" class="btn btn-info" id="add-row">Ajouter un ingrédient</button>

        <div class="mt-3">
            {{ form_row(form.save) }}
        </div>
        {{ form_end(form) }}
    </div>
{% endblock %}

{% block javascript_custom %}
    <script>
        $(function () {
            console.log("File form_recipe.html.twig loaded");
            let collectionHolder = $('#recipe-rows ul'); // Sélectionne la liste des ingrédients
            let addButton = $('#add-row'); // Sélectionne le bouton d'ajout

            if (!collectionHolder.length) {
                console.error("Impossible de trouver l'élément contenant la collection.");
                return;
            }

            let prototype = collectionHolder.data('prototype'); // Récupère le prototype
            if (!prototype) {
                console.error("Aucun prototype trouvé. Vérifiez le form_widget(form.rows.vars.prototype).");
                return;
            }

            addButton.on('click', function () {
                let index = collectionHolder.children().length; // Compte les éléments existants
                let newForm = prototype.replace(/__name__/g, index); // Remplace le placeholder

                let newElement = $('<li class="mb-2">' +
                    '<div class="mb-2">' + $(newForm).find('[name$="[ingredientSlug]"]').parent().html() + '</div>' +
                    '<div class="d-flex gap-2">' +
                    '<div style="flex: 1">' + $(newForm).find('[name$="[quantity]"]').parent().html() + '</div>' +
                    '<div style="flex: 2">' + $(newForm).find('[name$="[unitSlug]"]').parent().html() + '</div>' +
                    '</div>' +
                    '</li>');
                collectionHolder.append(newElement); // Ajoute à la liste
                updateUnitSelectOptions(newElement.find('[name$="[ingredientSlug]"]')); // Charge la liste des unites compatible
            });

            $("[name$='[ingredientSlug]']").each(function () {
                updateUnitSelectOptions($(this));
            });

            $(document).on("change", "[name$='[ingredientSlug]']", function (event) {
                updateUnitSelectOptions($(this));
            });

            // Met a jours la listes des unites compatibles
            function updateUnitSelectOptions(element) {
                let row = element.closest("li");
                let unitSelect = row.find("[name$='[unitSlug]']");
                let replace = "__slug__";
                let inputValue = $(element).val();
                let url = "{{ path('view_ingredient_compatible_units', {'slug': 'SLUG_PLACEHOLDER'}) }}".replace("SLUG_PLACEHOLDER", inputValue);
                console.log("Route call : (GET)" + url);

                $.ajax({
                    url: url,
                    method: "GET",
                }).done(function (data) {
                    console.log("Unités compatibles :", data.units);

                    if (data.units && data.units.length > 0) {
                        let currentUnit = unitSelect.val(); // Sauvegarde l'unité actuelle
                        unitSelect.empty(); // Vide les options

                        let unitExists = false;
                        data.units.forEach(unit => {
                            let option = new Option(unit.name, unit.slug);
                            unitSelect.append(option);
                            if (unit.slug === currentUnit) {
                                unitExists = true;
                            }
                        });

                        // Rétablir l'unité si elle est encore valide
                        if (unitExists) {
                            unitSelect.val(currentUnit);
                        }
                    }
                }).fail(function () {
                    console.error("Erreur lors du chargement des unités.");
                });
            }
        });

    </script>
{% endblock %}
